# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _example
else:
    import _example

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _example.ios_base_erase_event
    imbue_event = _example.ios_base_imbue_event
    copyfmt_event = _example.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _example.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _example.ios_base_flags(self, *args)

    def setf(self, *args):
        return _example.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _example.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _example.ios_base_precision(self, *args)

    def width(self, *args):
        return _example.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _example.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _example.ios_base_imbue(self, __loc)

    def getloc(self):
        return _example.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _example.ios_base_xalloc()

    def iword(self, __ix):
        return _example.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _example.ios_base_pword(self, __ix)
    __swig_destroy__ = _example.delete_ios_base

# Register ios_base in _example:
_example.ios_base_swigregister(ios_base)
cvar = _example.cvar
ios_base.boolalpha = _example.cvar.ios_base_boolalpha
ios_base.dec = _example.cvar.ios_base_dec
ios_base.fixed = _example.cvar.ios_base_fixed
ios_base.hex = _example.cvar.ios_base_hex
ios_base.internal = _example.cvar.ios_base_internal
ios_base.left = _example.cvar.ios_base_left
ios_base.oct = _example.cvar.ios_base_oct
ios_base.right = _example.cvar.ios_base_right
ios_base.scientific = _example.cvar.ios_base_scientific
ios_base.showbase = _example.cvar.ios_base_showbase
ios_base.showpoint = _example.cvar.ios_base_showpoint
ios_base.showpos = _example.cvar.ios_base_showpos
ios_base.skipws = _example.cvar.ios_base_skipws
ios_base.unitbuf = _example.cvar.ios_base_unitbuf
ios_base.uppercase = _example.cvar.ios_base_uppercase
ios_base.adjustfield = _example.cvar.ios_base_adjustfield
ios_base.basefield = _example.cvar.ios_base_basefield
ios_base.floatfield = _example.cvar.ios_base_floatfield
ios_base.badbit = _example.cvar.ios_base_badbit
ios_base.eofbit = _example.cvar.ios_base_eofbit
ios_base.failbit = _example.cvar.ios_base_failbit
ios_base.goodbit = _example.cvar.ios_base_goodbit
ios_base.app = _example.cvar.ios_base_app
ios_base.ate = _example.cvar.ios_base_ate
ios_base.binary = _example.cvar.ios_base_binary
ios_base.ios_base_in = _example.cvar.ios_base_ios_base_in
ios_base.out = _example.cvar.ios_base_out
ios_base.trunc = _example.cvar.ios_base_trunc
ios_base.beg = _example.cvar.ios_base_beg
ios_base.cur = _example.cvar.ios_base_cur
ios_base.end = _example.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _example.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
    return _example.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _example.ios_rdstate(self)

    def clear(self, *args):
        return _example.ios_clear(self, *args)

    def setstate(self, __state):
        return _example.ios_setstate(self, __state)

    def good(self):
        return _example.ios_good(self)

    def eof(self):
        return _example.ios_eof(self)

    def fail(self):
        return _example.ios_fail(self)

    def bad(self):
        return _example.ios_bad(self)

    def exceptions(self, *args):
        return _example.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _example.ios_swiginit(self, _example.new_ios(__sb))
    __swig_destroy__ = _example.delete_ios

    def tie(self, *args):
        return _example.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _example.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _example.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _example.ios_fill(self, *args)

    def imbue(self, __loc):
        return _example.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _example.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _example.ios_widen(self, __c)

# Register ios in _example:
_example.ios_swigregister(ios)

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _example.ostream_swiginit(self, _example.new_ostream(__sb))
    __swig_destroy__ = _example.delete_ostream

    def __lshift__(self, *args):
        return _example.ostream___lshift__(self, *args)

    def put(self, __c):
        return _example.ostream_put(self, __c)

    def write(self, __s, __n):
        return _example.ostream_write(self, __s, __n)

    def flush(self):
        return _example.ostream_flush(self)

    def tellp(self):
        return _example.ostream_tellp(self)

    def seekp(self, *args):
        return _example.ostream_seekp(self, *args)

# Register ostream in _example:
_example.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _example.istream_swiginit(self, _example.new_istream(__sb))
    __swig_destroy__ = _example.delete_istream

    def __rshift__(self, *args):
        return _example.istream___rshift__(self, *args)

    def gcount(self):
        return _example.istream_gcount(self)

    def get(self, *args):
        return _example.istream_get(self, *args)

    def getline(self, *args):
        return _example.istream_getline(self, *args)

    def ignore(self, *args):
        return _example.istream_ignore(self, *args)

    def peek(self):
        return _example.istream_peek(self)

    def read(self, __s, __n):
        return _example.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _example.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _example.istream_putback(self, __c)

    def unget(self):
        return _example.istream_unget(self)

    def sync(self):
        return _example.istream_sync(self)

    def tellg(self):
        return _example.istream_tellg(self)

    def seekg(self, *args):
        return _example.istream_seekg(self, *args)

# Register istream in _example:
_example.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _example.iostream_swiginit(self, _example.new_iostream(__sb))
    __swig_destroy__ = _example.delete_iostream

# Register iostream in _example:
_example.iostream_swigregister(iostream)

endl_cb_ptr = _example.endl_cb_ptr
endl = _example.endl
ends_cb_ptr = _example.ends_cb_ptr
ends = _example.ends
flush_cb_ptr = _example.flush_cb_ptr
flush = _example.flush
class Example(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def say_hello(self):
        return _example.Example_say_hello(self)

    def __init__(self):
        _example.Example_swiginit(self, _example.new_Example())
    __swig_destroy__ = _example.delete_Example

# Register Example in _example:
_example.Example_swigregister(Example)

class word(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, content):
        _example.word_swiginit(self, _example.new_word(content))
    __swig_destroy__ = _example.delete_word

    def updateWord(self, new_content):
        return _example.word_updateWord(self, new_content)

    def getWord(self):
        return _example.word_getWord(self)

    def testFunc(self, data1, data2, data3):
        return _example.word_testFunc(self, data1, data2, data3)

    def testReference(self, data):
        return _example.word_testReference(self, data)

    def testPointer(self, data):
        return _example.word_testPointer(self, data)

# Register word in _example:
_example.word_swigregister(word)


def fact(n):
    return _example.fact(n)


